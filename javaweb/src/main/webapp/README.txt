
@Copyright by SONG

<h1>会话跟踪</h1>
<h3>会话:一个用户的多次请求</h3>
<h3>会话跟踪:记录这个用户的会话状态</h3>
<h3>会话跟踪类型：URL重写/隐藏表单域/session/cookie</h3>
<h4>url:统一资源定位符 / uri:统一资源标识符</h4>

url: https://www.google.com - 全球定位
uri: /javaweb/index.html    - 当前项目

<h5>URL重写/隐藏表单域用法:适合传入到服务器的参数不多，一般传主键id</h5>

/**
 * Cookie的缺点:
 * 不安全，以文本形式存放数据(客户端)
 * 传输数据量比较大
 * 浏览器可能关闭Cookie，导致一些功能不可使用
 * Cookie的优点
 * 用户可以自由决定是否使用Cookie
 */

/**
 * url重写/隐藏表单域适合数据量小,只跟踪主键ID(在页面源码中出现)
 * session适合数据量稍大,设置超时(服务器端内存保存会话ID)-推荐
 * cookie适合数据量小需跟踪很长时间(客户端保存一段文本)

 * JSP 中 HttpSession 本质上是通过 Cookie 和 URL 重写 实现
 * Cookie 中存储中文 String name = URLEncoder.encode(name, "utf-8")
 */


jsp中Session 工作原理


浏览器和服务器采用http无状态的通讯，为了保持客户端的状态，使用session来达到这个目的。
然而服务端是怎么样标示不同的客户端或用户呢？
这里我们可以使用生活中的一个例子，假如你参加一个晚会，认识了很多人，
你会采取什么方式来区分不同的人呢！你可能根据脸型，也有可能根据用户的名字，
或者人的身份证，即采用一个独一无二的标示。在session机制中，
也采用了这样的一个唯一的session_id来标示不同的用户，不同的是：浏览器每次请求都会带上
由服务器为它生成的session_id.



简单介绍一下流程：当客户端访问服务器时，服务器根据需求设置session，
将会话信息保存在服务器上，同时将标示session的session_id传递给客户端浏览器，
浏览器将这个session_id保存在内存中(还有其他的存储方式，例如写在url中)，
我们称之为无过期时间的cookie。浏览器关闭后，这个cookie就清掉了，它不会
存在用户的cookie临时文件。
以后浏览器每次请求都会额外加上这个参数值，再服务器根据这个session_id，
就能取得客户端的数据状态。

如果客户端浏览器意外关闭，服务器保存的session数据不是立即释放，此时数据还会存在，只要我们知道那个session_id,就可以继续通过请求获得此session的信息；但是这个时候后台的session还存在，但是session的保存有一个过期
时间，一旦超过规定时间没有客户端请求时，他就会清除这个session。



jsp中Session 工作原理可以概括为以下几点：
1、收到客户机请求，生成唯一 ID 标识符
2、将 ID 保存到客户机 cookie
3、服务器建立存储区，由 ID 为索引，记录客户状态
4、收到客户机的后续请求后，通过 cookie 读取 ID 标识符
5、以 ID 标识符为索引，从存储区读取此客户连接状态







让我们用几个例子来描述一下cookie和session机制之间的区别与联系。
笔者曾经常去的一家咖啡店有喝5杯咖啡免费赠一杯咖啡的优惠，然而一次性消费5杯咖啡的
机会微乎其微，这时就需要某种方式来纪录某位顾客的消费数量。想象一下其实也无外乎
下面的几种方案：
1、该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进咖啡店，店员就知道
该怎么对待了。这种做法就是协议本身支持状态。
2、发给顾客一张卡片，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果
顾客出示这张卡片，则此次消费就会与以前或以后的消费相联系起来。这种做法就是在客户
端保持状态。
3、发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该
卡片，则店员在店里的纪录本上找到这个卡号对应的纪录添加一些消费信息。这种做法就是
在服务器端保持状态。

由于HTTP协议是无状态的，而出于种种考虑也不希望使之成为有状态的，因此，后面两种
方案就成为现实的选择。具体来说cookie机制采用的是在客户端保持状态的方案，
而session机制采用的是在服务器端保持状态的方案。同时我们也看到，由于采用服务器端
保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于
cookie机制来达到保存标识的目的，但实际上它还有其他选择。



